#!/usr/bin/env node

/**
 * Module dependencies.
 */

var package_info = require('../package.json');
var fs = require('fs');
var config = require('nconf');
var app = require('../app');
var debug = require('debug')('DialerPureCloudAPIDemo:server');
var http = require('http');
var gitrev = require('git-rev');

// Retrieve the configuration
//  Order: CLI, Environment, config file, defaults.
config.argv({
  'purecloud:region': {
    alias: 'region',
    describe: 'To connect to PureCloud in a given region (au, ie, jp, us)'
  },
  'purecloud:organization': {
    alias: [ 'organization', 'org' ],
    describe: 'The Organization name to connect to'
  },
  'purecloud:application': {
    alias: [ 'application', 'application_id', 'app_id', 'client_id', 'id' ],
    describe: 'The Application ID to be sent to PureCloud OAUTH (overrides organization)'
  },
  'port': {
    alias: 'p',
    describe: 'Make the server listen to this port'
  }
})
.env({
  separator: '_',
  lowerCase: true
})
.file({ file: 'config.json' })
.defaults({
  port: 3000,
  purecloud: {
    region: 'us',
    application: 'PLEASE PROVIDE',
    regions: [
      { id: 'au', name: 'Australia', suffix: 'com.au' },
      { id: 'ie', name: 'Ireland',   suffix: 'ie' },
      { id: 'jp', name: 'Japan',     suffix: 'jp' },
      { id: 'us', name: 'US',        suffix: 'com' }
    ],
    "organizations": [
    ]
  }
});

console.log("Version: %s", package_info.version);
gitrev.short(function(value)  { console.log('Git commit: ' + value); });
gitrev.branch(function(value) { console.log('Git branch: ' + value); });
gitrev.tag(function(value)    { console.log('Git tag: '    + value); });

/**
 * Get port and store in Express.
 */

var port = normalizePort(config.get('port'));
app.set('port', port);
console.log('Listening on port: ' + port);

/**
 * Get PureCloud Application Id and store in Express.
 */
var organizations     = config.get('purecloud:organizations');
var organization_name = config.get('purecloud:organization');
var organization      = undefined;
var application_id    = undefined;

config.get('purecloud:organizations').forEach(function(org) {
  console.log("Organization: %s (%s) in %s", org.name, org.id, org.region);
});
if (organization_name != undefined) {
  console.log("Loading Organization: %s", organization_name);
  organization = organizations.find(function(item) { return item.name.toLowerCase() === organization_name.toLowerCase(); });
  if (organization != undefined) {
    console.log("Loading Application ID from organization %s", organization.name);
    application_id = organization.application;
    app.set('organization_id', organization.id);
    app.set('organization_name', organization.name);
  } else {
    application_id = config.get('purecloud:application');
  }
} else {
  application_id = config.get('purecloud:application');
}
if (application_id) {
  console.log('Using PureCloud Application ID: ' + application_id);
  app.set('application_id', application_id);
} else {
  console.error('Undefined Purecloud Application ID');
//  exit
}

/**
 * Get PureCloud Region and store in Express.
 */
var regions   = config.get('purecloud:regions');
var region_id = (organization != undefined) ? organization.region : config.get('purecloud:region').toLowerCase() || 'us';
var region    = regions.find(function(item) { return item.id === region_id; });

console.log('Will connect to: mypurecloud.' + region.suffix + ' (' + region.name + ')');
app.set('purecloud_region', region.suffix);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
