<% layout('../layout') -%>

<h2>Details &nbsp;<i id="spinner-load" class="fa fa-refresh fa-spin" style="font-size:24px"></i></h2>

<div id="contactlist_view"></div>

<div>
  <a href="/ContactLists">Back to List</a>
</div>

<script id="contactlist_template" type="text/template">
<h4>ContactList: {{name}}</h4>
<hr/>

<dl class="dl-horizontal">
  <dt>Name:</dt><dd>{{name}}, version {{version}}</dd>
  <dt>{{columnNames.length}} Columns:<dt><dd>{{#columnNames}} {{.}}, {{/columnNames}}</dd>
  <dt># Contacts:</dt><dd>{{size}}</dd>
</dl>

<ul>
  <li><a href="/Contacts/?contactlist_id={{id}}">List</a> all contacts</li>
  <li><a href="/Contacts/new?contactlist_id={{id}}">Add</a> a new contact</li>
  <li>
    <div id="export_contacts_process">
      <button id="export_contacts" class="btn btn-default" rel="{{id}}" data-processing-text="Exporting..." data-processed-text="Exported">
        <span id="text">Export</span>&nbsp;&nbsp;<i id="spinner" class="fa fa-refresh fa-spin" style="font-size:18px"></i>
      </button>
      all contacts
    </div>
    <div id="download_contacts_process">
      <a id="download_link" class="" href="">Download</a> all contacts
    </div>
  </li>
  <li>
    <form id="import_contacts" method="POST" enctype="multipart/form-data" action="https://apps.mypurecloud.<%= settings.purecloud_region %>/uploads/contactlist" class="form-inline" role="form">
      <div class="form-group">
        <label for="file">CSV File:</label>
        <input id="file" name="file" type="file" class="form-control"  required />
        <input name="fileType" type="hidden" value="contactlist"/>
        <input name="id" type="hidden" value="{{id}}"/>
        <input name="contact-id-name" type="hidden" value="inin-outbound-id"/>

        <button id="import_submit" type="submit" class="btn btn-default" rel="{{id}}" data-processing-text="Importing..." data-processed-text="Imported">
          <span id="text">Import</span>&nbsp;&nbsp;<i id="spinner" class="fa fa-refresh fa-spin" style="font-size:18px"></i>
        </button>
      </div>
    </form>
  </li>
  <!-- These are actually column modifications -->
  <li>
    Change Column
      <select id="update_contacts_ChangeColumnName">
      {{#columnNames}}
        <option value="{{.}}">{{.}}</option>
      {{/columnNames}}
      </select>
      to
      <input id="update_contacts_ChangeColumnValue" type="text"/>
      for all contacts with
      <select id="update_contacts_SearchColumnName">
      {{#columnNames}}
        <option value="{{.}}">{{.}}</option>
      {{/columnNames}}
      </select>
      to
      <input id="update_contacts_SearchColumnValue" type="text"/>
      <button id="update_contacts" class="btn btn-default" rel="{{id}}" data-processing-text="Updating..." data-processed-text="Updated">
        <span id="text">Update</span>&nbsp;&nbsp;<i id="spinner" class="fa fa-refresh fa-spin" style="font-size:18px"></i>
      </button>
      <div id="update_contacts_progress">
        <br/>
        <p>Processed <span id="update_contacts_processed_count" class="badge">0</span> and Updated <span id="update_contacts_updated_count" class="badge">0</span>/<span class="badge">{{size}}</span> contacts.
        </p>
      </div>
  </li>
</ul>
</script>

<script>
var outbound_api;
var notifications_api;
var contactlist;
var update_contacts;
var import_submit;
var export_contacts;

function initialize_view()
{
  outbound_api      = new OutboundApi(purecloud_session);
  notifications_api = new NotificationsApi(purecloud_session);
  update_contacts   = new StateButton('update_contacts', on_click_update_contacts);
  import_submit     = new StateButton('import_submit');
  export_contacts   = new StateButton('export_contacts', on_click_export_contacts);

  console.log('Loading ContactList <%= id %>');
  outbound_api.getContactlistsContactlistId('<%= id %>', true, true, true)
    .done(view_contactlist)
    .fail(function(error){ console.error(error); });
}

function view_contactlist(data)
{
  contactlist = data;
  console.log("Displaying Contactlist %s %O", contactlist.id, contactlist);

  render_template(contactlist, 'contactlist_view', 'contactlist_template');
  $('#spinner-load').hide();

  $('#update_contacts_progress').hide();
  update_contacts.initialize();

  $('#import_contacts').submit(on_click_import_contacts);
  import_submit.initialize();

  export_contacts.initialize();
  $('#download_contacts_process').hide();
}

function on_click_import_contacts(event)
{
  console.log("Import Click Event!");

  event.preventDefault();
  import_submit.processing();

  var form_data = new FormData($('#import_contacts'));

  form_data.append('file', $('#import_contacts #file')[0].files[0]); // Here we assume a file was selected...
  form_data.append('fileType', 'contactlist');
  form_data.append('id', contactlist.id);
  form_data.append('contact-id-name', 'inin-outbound-id');

  $.ajax({
    method: 'POST',
    url: 'https://apps.mypurecloud.' + purecloud_region + '/uploads/contactlist',
    beforeSend: function(xhr) { xhr.setRequestHeader('Authorization', 'bearer ' + purecloud_session.getAuthToken()); },
    processData: false,
    contentType: false,
    timeout: 5000,
    shouldRetry: 5,
    data: form_data,
  })
  .done(function(data){
    console.log("Import Success! %O", data);
  })
  .fail(function(error){
    console.error(error);
    show_error("Error " + error.status + " while importing: " + error.statusText);
  })
  .always(function(){
    console.log("Wrapping up the buttons");
    import_submit.processed();
  });
}

function on_click_export_contacts(event)
{
  console.log("Export Click Event!");
  export_contacts.processing();

  var contactlist_id  = $(this).attr('rel');
  var export_topic_id = 'outbound.contactlists.' + contactlist_id + '.export'; // This is the Topic id we will subscribe to

  // Create a new channel to keep the subscriptions
  notifications_api.postChannels()
    .done(function(channel_data){
      console.log("Channel %s created %O", channel_data.id, channel_data);

      var websocket = new WebSocket(channel_data.connectUri);

      websocket.onopen = function(){
        console.log("WebSocket communicating with %s", websocket.url);
        // When the WebSocket is opened, subscribe to all topics we want (here 1 only)
        notifications_api.postChannelsChannelIdSubscriptions(channel_data.id, [{ id: export_topic_id }])
          .done(function(subscription_data){
            // When we have subscribed, start the Contacts export
            outbound_api.postContactlistsContactlistIdExport(contactlist_id)
              .done(function(export_data){
                console.log("Exporting Contact List %s %O", export_data.id, export_data);
              })
              .fail(function(error){ console.error(error); });
          })
          .fail(function(error){ console.error(error); });
      };

      // Now... the "Message loop" for our WebSocket
      websocket.onmessage = function(message) {
        console.log("Received message on WebSocket: %O", message);
        var data = JSON.parse(message.data);
        console.log("Data topic: %s", data.topicName);
        switch (data.topicName) {
          case export_topic_id: {
            console.log("Received message for topic: %s", data.topicName);
            if (data.eventBody)
            {
              if (data.eventBody.downloadUrl)
              {
                console.log("Received a download URL: %s", data.eventBody.downloadUrl);
                export_contacts.processed();
                setTimeout(function(){
                  $('#export_contacts_process').hide();
                  $('#download_contacts_process').show();
                  $('#download_contacts_process #download_link').attr('href', data.eventBody.downloadUrl);
                }, 500);
                websocket.close();
              }
            }
            else
            {
              console.error("Malformed data for topic: %s %O", data.topicName, data);
            }
            break;
          }
          case 'channel.metadata': {
            if (data.eventBody) {
              switch (data.eventBody.message) {
                case 'WebSocket Heartbeat': {
                  // On long operations, the WebSocket will receive a HeartBeat every 30 seconds
                  // We have nothing to do much, so tracing it for now
                  console.log("Received a heartbeat");
                  break;
                }
                default: {
                  console.log("Unknown message received: %s", data.eventBody.toString());
                  break;
                }
              }
            }
            else
            {
              console.log("Unknown metadata: %O", data);
            }
            break;
          }
          default:
          {
            console.log("Unknown topicName: %s %O", data.topicName, data);
          }
        }
      };
    })
    .fail(function(error){ console.error(error); });
}

function on_click_update_contacts(event)
{
  console.log("Update Click Event!");
  update_contacts.processing();

  // Prevent link from firing up
  event.preventDefault();

  $('#update_contacts').addClass('disabled');

  var column_search_name  = $('#update_contacts_SearchColumnName').val();
  var column_search_value = $('#update_contacts_SearchColumnValue').val();
  var column_update_name  = $('#update_contacts_ChangeColumnName').val();
  var column_update_value = $('#update_contacts_ChangeColumnValue').val();

  console.log("Search: [%s] == '%s'", column_search_name, column_search_value);
  console.log("Change: [%s] == '%s'", column_update_name, column_update_value);

  $('#update_contacts_updated_count').html(function(id,value) { return 0; });
  $('#update_contacts_progress').show(500);
  max_tries = 5;
  for (contact_id=1; contact_id <= contactlist.size; contact_id++)
  {
    //outbound_api.getContactlistsContactlistIdContactsContactId(contactlist.id, contact_id)
    RestRequest('GET', '/outbound/contactlists/' + contactlist.id + '/contacts/' + contact_id, 5, 5000)
      .done(function(data) {
        var contact_search_value = data.data[column_search_name];
        console.log ("Checking contact %s => %s: %s == %s?", data.id, column_search_name, column_search_value, contact_search_value);
        if (data.data[column_search_name] == column_search_value)
        {
          console.log("Match (%s)!", column_update_value);
          data.data[column_update_name] = column_update_value;
          //outbound_api.putContactlistsContactlistIdContactsContactId(data.contactListId, data.id, data)
          RestRequest('PUT', '/outbound/contactlists/' + contactlist.id + '/contacts/' + data.id, 5, 5000, 1, data)
            .done(function(data){
              console.log("Success! %O", data);
              $('#update_contacts_updated_count').html(function(id,value) { return +value+1; });
            })
            .fail(function(error){ console.error(error); });
        }
        $('#update_contacts_processed_count').html(function(id,value) { return +value+1; });
        console.log("processed: " + Number($('#update_contacts_processed_count').html()) + " / " + contactlist.size);
        if (Number($('#update_contacts_processed_count').html()) == contactlist.size) {
          update_contacts.processed();
        }
      })
      .fail(function(jqXHR, status){
        console.error("Error %s to fetch contact %s jqXHR=%O", status, contact_id, jqXHR);
      });
  }
}
</script>
